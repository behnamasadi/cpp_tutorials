// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

#include "calculator.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace calculator {

inline constexpr CalcResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CalcResponse::CalcResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CalcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalcResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalcResponseDefaultTypeInternal() {}
  union {
    CalcResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalcResponseDefaultTypeInternal _CalcResponse_default_instance_;

inline constexpr CalcRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : number1_{0},
        number2_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CalcRequest::CalcRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CalcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalcRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalcRequestDefaultTypeInternal() {}
  union {
    CalcRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalcRequestDefaultTypeInternal _CalcRequest_default_instance_;
}  // namespace calculator
static ::_pb::Metadata file_level_metadata_calculator_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_calculator_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_calculator_2eproto = nullptr;
const ::uint32_t TableStruct_calculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::calculator::CalcRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::calculator::CalcRequest, _impl_.number1_),
    PROTOBUF_FIELD_OFFSET(::calculator::CalcRequest, _impl_.number2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::calculator::CalcResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::calculator::CalcResponse, _impl_.result_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::calculator::CalcRequest)},
        {10, -1, -1, sizeof(::calculator::CalcResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::calculator::_CalcRequest_default_instance_._instance,
    &::calculator::_CalcResponse_default_instance_._instance,
};
const char descriptor_table_protodef_calculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020calculator.proto\022\ncalculator\"/\n\013CalcRe"
    "quest\022\017\n\007number1\030\001 \001(\001\022\017\n\007number2\030\002 \001(\001\""
    "\036\n\014CalcResponse\022\016\n\006result\030\001 \001(\0012\214\001\n\021Calc"
    "ulatorService\0228\n\003Add\022\027.calculator.CalcRe"
    "quest\032\030.calculator.CalcResponse\022=\n\010Subtr"
    "act\022\027.calculator.CalcRequest\032\030.calculato"
    "r.CalcResponseb\006proto3"
};
static ::absl::once_flag descriptor_table_calculator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_calculator_2eproto = {
    false,
    false,
    262,
    descriptor_table_protodef_calculator_2eproto,
    "calculator.proto",
    &descriptor_table_calculator_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_calculator_2eproto::offsets,
    file_level_metadata_calculator_2eproto,
    file_level_enum_descriptors_calculator_2eproto,
    file_level_service_descriptors_calculator_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_calculator_2eproto_getter() {
  return &descriptor_table_calculator_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_calculator_2eproto(&descriptor_table_calculator_2eproto);
namespace calculator {
// ===================================================================

class CalcRequest::_Internal {
 public:
};

CalcRequest::CalcRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:calculator.CalcRequest)
}
CalcRequest::CalcRequest(
    ::google::protobuf::Arena* arena, const CalcRequest& from)
    : CalcRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CalcRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalcRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, number1_),
           0,
           offsetof(Impl_, number2_) -
               offsetof(Impl_, number1_) +
               sizeof(Impl_::number2_));
}
CalcRequest::~CalcRequest() {
  // @@protoc_insertion_point(destructor:calculator.CalcRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalcRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CalcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.CalcRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.number1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.number2_) -
      reinterpret_cast<char*>(&_impl_.number1_)) + sizeof(_impl_.number2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalcRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CalcRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CalcRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double number2 = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number2_)}},
    // double number1 = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double number1 = 1;
    {PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double number2 = 2;
    {PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CalcRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.CalcRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double number1 = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number1 = this->_internal_number1();
  ::uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_number1(), target);
  }

  // double number2 = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number2 = this->_internal_number2();
  ::uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_number2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.CalcRequest)
  return target;
}

::size_t CalcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.CalcRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double number1 = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number1 = this->_internal_number1();
  ::uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    total_size += 9;
  }

  // double number2 = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number2 = this->_internal_number2();
  ::uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalcRequest::_class_data_ = {
    CalcRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CalcRequest::GetClassData() const {
  return &_class_data_;
}

void CalcRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalcRequest*>(&to_msg);
  auto& from = static_cast<const CalcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.CalcRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number1 = from._internal_number1();
  ::uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    _this->_internal_set_number1(from._internal_number1());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_number2 = from._internal_number2();
  ::uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    _this->_internal_set_number2(from._internal_number2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalcRequest::CopyFrom(const CalcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.CalcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalcRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CalcRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CalcRequest::InternalSwap(CalcRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number2_)
      + sizeof(CalcRequest::_impl_.number2_)
      - PROTOBUF_FIELD_OFFSET(CalcRequest, _impl_.number1_)>(
          reinterpret_cast<char*>(&_impl_.number1_),
          reinterpret_cast<char*>(&other->_impl_.number1_));
}

::google::protobuf::Metadata CalcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_calculator_2eproto_getter, &descriptor_table_calculator_2eproto_once,
      file_level_metadata_calculator_2eproto[0]);
}
// ===================================================================

class CalcResponse::_Internal {
 public:
};

CalcResponse::CalcResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:calculator.CalcResponse)
}
CalcResponse::CalcResponse(
    ::google::protobuf::Arena* arena, const CalcResponse& from)
    : CalcResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CalcResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalcResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
CalcResponse::~CalcResponse() {
  // @@protoc_insertion_point(destructor:calculator.CalcResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalcResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CalcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.CalcResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalcResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CalcResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CalcResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double result = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(CalcResponse, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double result = 1;
    {PROTOBUF_FIELD_OFFSET(CalcResponse, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CalcResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.CalcResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double result = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_result = this->_internal_result();
  ::uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.CalcResponse)
  return target;
}

::size_t CalcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.CalcResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double result = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_result = this->_internal_result();
  ::uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalcResponse::_class_data_ = {
    CalcResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CalcResponse::GetClassData() const {
  return &_class_data_;
}

void CalcResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalcResponse*>(&to_msg);
  auto& from = static_cast<const CalcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.CalcResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_result = from._internal_result();
  ::uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalcResponse::CopyFrom(const CalcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.CalcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalcResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CalcResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CalcResponse::InternalSwap(CalcResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata CalcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_calculator_2eproto_getter, &descriptor_table_calculator_2eproto_once,
      file_level_metadata_calculator_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace calculator
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
